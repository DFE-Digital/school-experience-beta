// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolExperienceData;

namespace SchoolExperienceData.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181015161647_InitialDb")]
    partial class InitialDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SchoolExperienceData.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan?>("BookedDate");

                    b.Property<int?>("CandidateId");

                    b.Property<string>("ExtraNotes");

                    b.Property<string>("ReportTo");

                    b.Property<DateTime?>("RequestedDate");

                    b.Property<int?>("RequestedSubjectId");

                    b.Property<DateTime>("RespondBy");

                    b.Property<int?>("SchoolId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("RequestedSubjectId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("SchoolExperienceData.Entities.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessibilityRequirements");

                    b.Property<int>("Degree");

                    b.Property<string>("DegreeOther");

                    b.Property<int?>("DegreeSubjectId");

                    b.Property<string>("ExpectationsQuestion");

                    b.Property<string>("GitisDataId");

                    b.Property<string>("GitisReference");

                    b.Property<bool>("HasCriminalRecord");

                    b.Property<string>("HowFarQuestion");

                    b.Property<bool>("IsDbsChecked");

                    b.Property<int?>("PreferredSubjectId");

                    b.Property<int>("TeacherTrainingStatus");

                    b.Property<string>("WhyQuestion");

                    b.HasKey("Id");

                    b.HasIndex("DegreeSubjectId");

                    b.HasIndex("GitisDataId");

                    b.HasIndex("PreferredSubjectId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("SchoolExperienceData.Entities.CandidateCalendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CandidateId");

                    b.Property<DateTime>("Finish");

                    b.Property<DateTime>("Start");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("CandidateCalendar");
                });

            modelBuilder.Entity("SchoolExperienceData.Entities.GitisData", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("Name");

                    b.Property<string>("PostCode");

                    b.Property<string>("TelephoneNumber");

                    b.HasKey("Id");

                    b.ToTable("GitisUsers");
                });

            modelBuilder.Entity("SchoolExperienceData.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAddress");

                    b.Property<string>("NotificationId");

                    b.Property<string>("SendGroupReference");

                    b.Property<DateTime>("Sent");

                    b.Property<string>("TemplateId");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SchoolExperienceData.Entities.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CandidateParkingDetails");

                    b.Property<int>("DbsRequirement");

                    b.Property<string>("DressCodeDetails");

                    b.Property<string>("Name");

                    b.Property<int>("PlacementFee");

                    b.Property<TimeSpan>("PlacementFinishTime");

                    b.Property<TimeSpan>("PlacementStartTime");

                    b.Property<string>("URN");

                    b.HasKey("Id");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("SchoolExperienceData.Entities.SchoolCalendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Finish");

                    b.Property<int?>("SchoolId");

                    b.Property<DateTime>("Start");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolCalendar");
                });

            modelBuilder.Entity("SchoolExperienceData.Entities.SchoolSchoolUserJoin", b =>
                {
                    b.Property<int>("SchoolId");

                    b.Property<int>("SchoolUserId");

                    b.HasKey("SchoolId", "SchoolUserId");

                    b.HasIndex("SchoolUserId");

                    b.ToTable("SchoolSchoolUserJoin");
                });

            modelBuilder.Entity("SchoolExperienceData.Entities.SchoolUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DfeReference");

                    b.HasKey("Id");

                    b.ToTable("SchoolUsers");
                });

            modelBuilder.Entity("SchoolExperienceData.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int?>("SchoolId");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("SchoolExperienceData.Entities.Booking", b =>
                {
                    b.HasOne("SchoolExperienceData.Entities.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId");

                    b.HasOne("SchoolExperienceData.Entities.Subject", "RequestedSubject")
                        .WithMany()
                        .HasForeignKey("RequestedSubjectId");

                    b.HasOne("SchoolExperienceData.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId");
                });

            modelBuilder.Entity("SchoolExperienceData.Entities.Candidate", b =>
                {
                    b.HasOne("SchoolExperienceData.Entities.Subject", "DegreeSubject")
                        .WithMany()
                        .HasForeignKey("DegreeSubjectId");

                    b.HasOne("SchoolExperienceData.Entities.GitisData", "GitisData")
                        .WithMany()
                        .HasForeignKey("GitisDataId");

                    b.HasOne("SchoolExperienceData.Entities.Subject", "PreferredSubject")
                        .WithMany()
                        .HasForeignKey("PreferredSubjectId");
                });

            modelBuilder.Entity("SchoolExperienceData.Entities.CandidateCalendar", b =>
                {
                    b.HasOne("SchoolExperienceData.Entities.Candidate")
                        .WithMany("Calendar")
                        .HasForeignKey("CandidateId");
                });

            modelBuilder.Entity("SchoolExperienceData.Entities.SchoolCalendar", b =>
                {
                    b.HasOne("SchoolExperienceData.Entities.School")
                        .WithMany("Calendar")
                        .HasForeignKey("SchoolId");
                });

            modelBuilder.Entity("SchoolExperienceData.Entities.SchoolSchoolUserJoin", b =>
                {
                    b.HasOne("SchoolExperienceData.Entities.School", "School")
                        .WithMany("AssociatedUsers")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SchoolExperienceData.Entities.SchoolUser", "SchoolUser")
                        .WithMany("Associations")
                        .HasForeignKey("SchoolUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SchoolExperienceData.Entities.Subject", b =>
                {
                    b.HasOne("SchoolExperienceData.Entities.School")
                        .WithMany("PlacementSubjects")
                        .HasForeignKey("SchoolId");
                });
#pragma warning restore 612, 618
        }
    }
}
